<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>standLeftFire_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>hittableEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial values

initial = true;
enemyType = "ElviraFire";

gameStarted = false;

walking = false;
walkTimer = 0;
fall = 0;
fallMax = 600 / room_speed;
fallMult = 30 / room_speed;

left = true;
right = false;

dead = false;
flung = false;
flungBy = noone;
hitByWater = false;
attack = false;
inWater = false;
inv = false;

airAbility = false;
earthAbility = false;
fireAbility = true;
waterAbility = false;

hitByFireball = false;
minimumDistance = 4;

attackSpeed = (10/30);
damage = 1;
instanceHealth = 5;
walkSpeed = 60 / room_speed;
runMult = 2;
standLeft = standLeftFire_spr;
walkLeft = walkLeftFire_spr;
attackLeft = attackLeftFire_spr;
dieLeft = dieLeftFire_spr;
standRight = standRightFire_spr;
walkRight = walkRightFire_spr;
attackRight = attackRightFire_spr;
dieRight = dieRightFire_spr;
walkImageSpeed = 4 / room_speed;
attackImageSpeed = walkImageSpeed;

randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Goat jump

height = 7;
jump = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Boar charge cooldown

if (enemyType = "boar" || enemyType = "goat") {
    chargeCooldown = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can attack again

attack = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End attack

if (!dead) {
    if(enemyType == "dog" || enemyType = "wolf") {
        with(thisDogFire) instance_destroy();
        thisDogFire = noone;
    }
    
    alarm[3] = room_speed * (16/30);
    if(hitByWater &amp;&amp; !waterAbility) {
        alarm[3] *= 2;
    }
    if(left) {
        sprite_index = standLeft;
    } else {
        sprite_index = standRight;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No longer slowed
hitByWater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack

if (fireAbility) {
    if (attackType &lt; 2 &amp;&amp; !instance_exists(fireShield)) {
        
    } else if (attackType &lt; 6) {
        if (left)
            elFireball = instance_create(x, y + 7, fireball);
        else
            elFireball = instance_create(x + sprite_width, y + 7, fireball);
        
        elFireball.firedBy = ElviraFire;
    } else {
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if hit

if (!dead) {
    for(num = 0; num &lt; 5; num++) {
        if (global.enemyHitId[num] == id &amp;&amp; !inv) {
            inv = true;
            if (global.enemyHitType[num] == "air") {
                playerDamage = 2;
                hitByFireball = false;
                if(earthAbility) {
                    playerDamage *= 0.7;
                }
                if(fireAbility || earthAbility) {
                    playerDamage /= 2;
                }
            } else if (global.enemyHitType[num] == "earth") {
                playerDamage = 6;
                flung = true;
                flungBy = Player.id;
                hitByFireball = false;
            }  else if (global.enemyHitType[num] == "water") {
                playerDamage = 4;
                hitByFireball = false;
                if(!waterAbility) {
                    hitByWater = true;
                    alarm[1] = room_speed * 2; 
                }
                if(earthAbility) {
                    playerDamage *= 0.7;
                }
                if(fireAbility || earthAbility) {
                    playerDamage *= 2;
                }
            }
            instanceHealth -= playerDamage;
            global.enemyHit[num] = false;
            global.enemyHitId[num] = noone;
            global.enemyHitType[num] = noone;
        }
    }
    if(place_meeting(x, y, fireball)) {
        conFireball = instance_place(x, y, fireball);
        if(conFireball.firedBy = Player) {
            if (airAbility) {
                instanceHealth -= 6;
            } else if (earthAbility) {
                instanceHealth -= 1.05;
            } else if (waterAbility) {
                instanceHealth -= 2;
            } else {
                instanceHealth -= 3;
            }
            hitByFireball = true;
            with(conFireball) {
                instance_destroy();
            }
        }
    }
    CollisionChecking();
}
    
if(instanceHealth &lt;= 0) {
    if(enemyType == "dog" || enemyType = "wolf") {
        with(thisDogFire) instance_destroy();
    }
    Player.enemiesKilled[Player.numEnemiesKilled] = id;
    Player.numEnemiesKilled++;
    dead = true;
    instance_change(elementalEnemyDead, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set correct values for enemy based on type

if(initial) {

        found = false;
        for(i = 0; i &lt; array_length_1d(global.enemies); i++) {
            if (global.enemies[i] = id)
                found = true;
        }
        if (!found)
            instance_destroy();
    

    if (enemyType == "dog") {
        fireAbility = true;
        minimumDistance = 8;
        detectionDistance = 200;
        attackSpeed = (8/30);
        damage = 3;
        initialHealth = 10;
        walkSpeed = 60 / room_speed;
        runMult = 2;
        standLeft = dogStandLeft_spr;
        walkLeft = dogWalkLeft_spr;
        attackLeft = dogAttackLeft_spr;
        dieLeft = dogDieLeft_spr;
        standRight = dogStandRight_spr;
        walkRight = dogWalkRight_spr;
        attackRight = dogAttackRight_spr;
        dieRight = dogDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        attackImageSpeed = walkImageSpeed;
        thisDogFire = noone;
    } else if (enemyType = "boar") {
        fireAbility = true;
        minimumDistance = 4;
        detectionDistance = 300;
        attackSpeed = (16/30);
        damage = 1;
        initialHealth = 8;
        walkSpeed = 60 / room_speed;
        runMult = 1.5;
        standLeft = boarStandLeft_spr;
        walkLeft = boarWalkLeft_spr;
        attackLeft = boarAttackLeft_spr;
        chargeLeft = boarChargeLeft_spr;
        dieLeft = boarDieLeft_spr;
        standRight = boarStandRight_spr;
        walkRight = boarWalkRight_spr;
        attackRight = boarAttackRight_spr;
        chargeRight = boarChargeRight_spr;
        dieRight = boarDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        chargeMult = 5;
        chargeSpeed = walkSpeed * chargeMult;
        chargeImageSpeed = walkImageSpeed * chargeMult;
        attackImageSpeed = walkImageSpeed;
    } else if (enemyType = "bear") {
        earthAbility = true;
        minimumDistance = 16;
        minimumYDistance = 48;
        detectionDistance = 200;
        attackSpeed = (30/30);
        damage = 4;
        initialHealth = 20;
        walkSpeed = 30 / room_speed;
        runMult = 2;
        standLeft = bearStandLeft_spr;
        walkLeft = bearWalkLeft2_spr;
        attackLeft = bearAttackLeft_spr;
        dieLeft = bearDieLeft_spr;
        standRight = bearStandRight_spr;
        walkRight = bearWalkRight2_spr;
        attackRight = bearAttackRight_spr;
        dieRight = bearDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        attackImageSpeed = 2 / room_speed;
    } else if (enemyType == "wolf") {
        waterAbility = true;
        minimumDistance = 12;
        detectionDistance = 200;
        attackSpeed = (4/30);
        damage = 3;
        initialHealth = 15;
        walkSpeed = 75 / room_speed;
        runMult = 2;
        standLeft = wolfStandLeft_spr;
        walkLeft = wolfWalkLeft_spr;
        attackLeft = wolfAttackLeft_spr;
        dieLeft = wolfDieLeft_spr;
        standRight = wolfStandRight_spr;
        walkRight = wolfWalkRight_spr;
        attackRight = wolfAttackRight_spr;
        dieRight = wolfDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        attackImageSpeed = walkImageSpeed;
        thisDogFire = noone;
    } else if (enemyType = "goat") {
        earthAbility = true;
        minimumDistance = 4;
        detectionDistance = 300;
        attackSpeed = (20/30);
        damage = 4;
        initialHealth = 12;
        walkSpeed = 45 / room_speed;
        runMult = 1.5;
        standLeft = goatStandLeft_spr;
        walkLeft = goatWalkLeft_spr;
        attackLeft = goatAttackLeft_spr;
        chargeLeft = goatChargeLeft_spr;
        dieLeft = goatDieLeft_spr;
        standRight = goatStandRight_spr;
        walkRight = goatWalkRight_spr;
        attackRight = goatAttackRight_spr;
        chargeRight = goatChargeRight_spr;
        dieRight = goatDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        chargeMult = 6;
        chargeSpeed = walkSpeed * chargeMult;
        chargeImageSpeed = walkImageSpeed * chargeMult;
        attackImageSpeed = walkImageSpeed;
        jump = false;
        height = 0;
    } else if (enemyType = "snake") {
        fireAbility = true;
        minimumDistance = 4;
        detectionDistance = 250;
        attackSpeed = (3/30);
        damage = 1;
        initialHealth = 2;
        walkSpeed = 60 / room_speed;
        runMult = 2;
        standLeft = snakeIdleLeft_spr;
        walkLeft = snakeMoveLeft_spr;
        attackLeft = snakeAttackLeft_spr;
        dieLeft = snakeDieLeft_spr;
        standRight = snakeIdleRight_spr;
        walkRight = snakeMoveRight_spr;
        attackRight = snakeAttackRight_spr;
        dieRight = snakeDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        attackImageSpeed = 2 / room_speed;
    } else if (enemyType = "golem") {
        earthAbility = true;
        minimumDistance = 16;
        minimumYDistance = 48;
        detectionDistance = 200;
        attackSpeed = (30/30);
        damage = 6;
        initialHealth = 30;
        walkSpeed = 30 / room_speed;
        runMult = 2;
        standLeft = golemStandLeft_spr;
        walkLeft = golemWalkLeft_spr;
        attackLeft = golemAttackLeft_spr;
        dieLeft = golemDieLeft_spr;
        standRight = golemStandRight_spr;
        walkRight = golemWalkRight_spr;
        attackRight = golemAttackRight_spr;
        dieRight = golemDieRight_spr;
        walkImageSpeed = 4 / room_speed;
        attackImageSpeed = 2 / room_speed;
    }
    
    instanceHealth = initialHealth;
    sprite_index = standLeft;
    runSpeed = walkSpeed * runMult;
    runImageSpeed = walkImageSpeed * runMult;
    initial = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check movement

run = runSpeed;
walk = walkSpeed;

if(!dead) {
    if(flung)
        instance_change(elementalEnemyFlung, true);
    else {
        flungBy = noone;
        
        Gravity();
    
        if (hitByWater &amp;&amp; !waterAbility) {
            run /= 2;
            walk /= 2;
        }
        
        if (Player.x &gt; arenaStart) {
            if (Player.x &lt; x) {
                left = true;
                right = false;
            } else {
                left = false;
                right = true;
            }
            
            if(!attack) {
                
                attack = true;
                alarm[0] = room_speed;
                attackType = irandom(7);
            
                if (collision_rectangle(x - minimumDistance, y, x, y + sprite_height,
                                        Player, false, true)
                    || collision_rectangle(x + sprite_width, y + minimumYDistance, 
                    x + sprite_width + minimumDistance, y + sprite_height, Player,
                    false, true) &amp;&amp; !Player.dash) {
                    
                    image_index = 0;
                     
                    alarm[2] = room_speed * attackSpeed;
                    effectiveDamage = damage;
                    if(Player.earthAbility &amp;&amp; !earthAbility) {
                        effectiveDamage *= 0.7;
                    }
                    if (airAbility) {
                        if (Player.fireAbility || Player.earthAbility) {
                            effectiveDamage /= 2;
                        }
                    } else if (waterAbility) {
                        if (Player.fireAbility || Player.earthAbility) {
                            effectiveDamage *= 2;
                        }
                    } else if (fireAbility) {
                        if (Player.earthAbility) {
                            effectiveDamage /= 2;
                        } else if (Player.waterAbility){
                            effectiveDamage /= 1.5;
                        } else if (Player.airAbility) {
                            effectiveDamage *= 2;
                        }
                    }
                    if(enemyType == "dog" || enemyType == "wolf") {
                        yOffset = 2;
                        if(!place_free(x, y)) {
                            yOffset -= 10;
                        }
                        if (left) {
                            thisDogFire = instance_create(x - 12, y + yOffset, dogFire);
                            thisDogFire.owner = id;
                        } else {
                            thisDogFire = instance_create(x + sprite_width - 4, y + yOffset, dogFire);
                            thisDogFire.owner = id;
                        }
                    } else if (enemyType = "boar") {
                        if (charge) {
                            effectiveDamage *= chargeMult;
                            charge = false;
                            chargeCooldown = true;
                            alarm[4] = room_speed * (2);
                            Player.flung = true;
                            Player.flungBy = id;
                            Player.flingInitial = true;
                        }
                    } else if (enemyType = "goat") {
                        if (charge) {
                            effectiveDamage *= 2;
                            charge = false;
                            chargeCooldown = true;
                            alarm[4] = room_speed * (2);
                            Player.flung = true;
                            Player.flungBy = id;
                            Player.flingInitial = true;
                        }
                    } else if (enemyType = "bear" || enemyType = "golem") {
                        Player.flung = true;
                        Player.flungBy = id;
                        Player.flingInitial = true;
                    }
                    if(!Player.inv) {
                        audio_play_sound(snd_playerDamaged, 10, false);
                        Player.health -= effectiveDamage;
                        Player.inv = true;
                        Player.alarm[7] = room_speed * (1/2);
                    }
                    attack = true;
                    image_speed = attackImageSpeed;
                    
                    if (left) {
                        sprite_index = attackLeft;
                    } else {
                        sprite_index = attackRight;
                    }
                } else if (collision_rectangle(x - minimumDistance, y - sprite_height,
                                               x + sprite_width + minimumDistance, y, 
                                               Player, false, true) = noone) {
                    image_speed = runImageSpeed;
                    if (left) {
                        if ((enemyType = "boar" || enemyType = "goat") &amp;&amp; charge)
                            run = boarCharge;
                        
                        if ((place_free(x - run,y)
                             || place_meeting(x - run, y, enemy))
                             &amp;&amp; place_meeting(x - run - sprite_width,
                             y + 64, terrain)) {
                            if ((enemyType = "boar" || enemyType = "goat") &amp;&amp; charge)
                                sprite_index = chargeLeft;
                            else
                                sprite_index = walkLeft;
                                
                            x -= run;
                        } else 
                            sprite_index = standLeft;
                    } else {
                        if ((enemyType = "boar" || enemyType = "goat") &amp;&amp; charge)
                            run = boarCharge;
                            
                        if ((place_free(x + run, y)
                             || place_meeting(x + run, y, enemy))
                             &amp;&amp; place_meeting(x + run + sprite_width, 
                             y + 64, terrain)) {
                            if ((enemyType = "boar" || enemyType = "goat") &amp;&amp; charge)
                                sprite_index = chargeRight;
                            else
                                sprite_index = walkRight;
                                
                            x += run;
                        } else
                            sprite_index = standRight;
                    }
                } else {
                    if (left) {
                        sprite_index = standLeft;
                    } else {
                        sprite_index = standRight;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>drawHealth</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
