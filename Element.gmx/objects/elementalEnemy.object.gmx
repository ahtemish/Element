<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>defaultEnemyStandLeft_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemy</parentName>
  <maskName>playerMask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial values

walking = false;
walkTimer = 0;
fall = 0;
fallMax = 600 / room_speed;
fallMult = 30 / room_speed;
left = true;
right = false;
dead = false;
hitByEarth = false;
hitByWater = false;
reverse = false;
punch = false;
airAbility = false;
earthAbility = false;
fireAbility = false;
waterAbility = false;
initial = true;
hitByFireball = false;

randomize();
alarm[0] = irandom(room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can punch again

punch = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop punch

if (!dead) {
    alarm[3] = room_speed * (16/30);
    if(hitByWater &amp;&amp; !waterAbility) {
        alarm[3] *= 3;
    }
    if(left) {
        sprite_index = standLeft;
    } else {
        sprite_index = standRight;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No longer slowed
hitByWater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start move

if(abs(Player.x - x) &gt; minimumDistance + sprite_width) {
    walkTimer =  room_speed / 2;
    walking = true;
    walkDirection = irandom(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if hit

if (!dead) {
    for(num = 0; num &lt; 5; num++) {
        if (global.enemyHitId[num] == id) {
            if (global.enemyHitType[num] == "air") {
                playerDamage = 2;
                hitByFireball = false;
                if(earthAbility) {
                    playerDamage *= 0.7;
                }
                if(fireAbility || earthAbility) {
                    playerDamage /= 2;
                }
            } else if (global.enemyHitType[num] == "earth") {
                playerDamage = 6;
                hitByEarth = true;
                hitByFireball = false;
            }  else if (global.enemyHitType[num] == "water") {
                playerDamage = 4;
                hitByFireball = false;
                if(!waterAbility) {
                    hitByWater = true;
                    alarm[1] = room_speed * 2; 
                }
                if(earthAbility) {
                    playerDamage *= 0.7;
                }
                if(fireAbility || earthAbility) {
                    playerDamage *= 2;
                }
            }
            instanceHealth -= playerDamage;
            global.enemyHit[num] = false;
            global.enemyHitId[num] = noone;
            global.enemyHitType[num] = noone;
        }
    }
    if(place_meeting(x, y, fireball)) {
        conFireball = instance_place(x, y, fireball);
        if(conFireball.firedBy = Player) {
            if(airAbility) {
                instanceHealth -= 6;
            } else if(earthAbility) {
                instanceHealth -= 1.05;
            } else {
                instanceHealth -= 3;
            }
            hitByFireball = true;
            with(conFireball) {
                instance_destroy();
            }
        }
    }
    CollisionChecking();
}
    
if(instanceHealth &lt;= 0) {
    dead = true;
    instance_change(elementalEnemyDead, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set correct values for element

if(initial) {
    if (airAbility) {
        minimumDistance = 3;
        punchSpeed = (4/30);
        damage = 0.5;
        instanceHealth = 6;
        walkSpeed = 120 / room_speed;
        standLeft = airEnemyStandLeft_spr;
        punchLeft = airEnemyPunchLeft_spr;
        dieLeft = airEnemyDieLeft_spr;
        standRight = airEnemyStandRight_spr;
        punchRight = airEnemyPunchRight_spr;
        dieRight = airEnemyDieRight_spr;
    } else if (earthAbility) {
        minimumDistance = 8;
        punchSpeed = (16/30);
        damage = 2;
        instanceHealth = 24;
        walkSpeed = 30 / room_speed;
        standLeft = earthEnemyStandLeft_spr;
        punchLeft = earthEnemyPunchLeft_spr;
        dieLeft = earthEnemyDieLeft_spr;
        standRight = earthEnemyStandRight_spr;
        punchRight = earthEnemyPunchRight_spr;
        dieRight = earthEnemyDieRight_spr;
    } else if (waterAbility) {
        minimumDistance = 6;
        punchSpeed = (8/30);
        damage = 1;
        instanceHealth = 16;
        walkSpeed = 60 / room_speed;
        standLeft = waterEnemyStandLeft_spr;
        punchLeft = waterEnemyPunchLeft_spr;
        dieLeft = waterEnemyDieLeft_spr;
        standRight = waterEnemyStandRight_spr;
        punchRight = waterEnemyPunchRight_spr;
        dieRight = waterEnemyDieRight_spr;
    } else if (fireAbility) {
        minimumDistance = 300;
        punchSpeed = (8/30);
        damage = 1.25;
        instanceHealth = 10;
        walkSpeed = 45 / room_speed;
        standLeft = fireEnemyStandLeft_spr;
        punchLeft = fireEnemyPunchLeft_spr;
        dieLeft = fireEnemyDieLeft_spr;
        standRight = fireEnemyStandRight_spr;
        punchRight = fireEnemyPunchRight_spr;
        dieRight = fireEnemyDieRight_spr;
    } else {    
        minimumDistance = 6;
        punchSpeed = (8/30);
        damage = 1;
        instanceHealth = 12;
        walkSpeed = 60 / room_speed;
        standLeft = defaultEnemyStandLeft_spr;
        punchLeft = defaultEnemyPunchLeft_spr;
        dieLeft = defaultEnemyDieLeft_spr;
        standRight = defaultEnemyStandRight_spr;
        punchRight = defaultEnemyPunchRight_spr;
        dieRight = defaultEnemyDieRight_spr;
    }
    sprite_index = standLeft;
    runSpeed = walkSpeed * 2;
    initial = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check movement

if(!dead) {
    if(hitByEarth) {
        if(!earthAbility) {
            instance_change(elementalEnemyFlung, true);
        }
    } else {
        Gravity();
    
        run = runSpeed;
        walk = walkSpeed;
        if (hitByWater &amp;&amp; !waterAbility) {
            run /= 2;
            walk /= 2;
        }
        if (distance_to_object(Player) &lt; 150 || hitByFireball 
            || (fireAbility &amp;&amp; distance_to_object(Player) &lt; 450)) {
            if (Player.x &lt; x) {
                left = true;
                right = false;
            } else {
                left = false;
                right = true;
            }
            if(!punch) {
                if((abs(Player.x - x) &gt; minimumDistance + sprite_width)) {
                    if(left) {
                        if(abs(Player.x - x) &gt; run) {
                            sprite_index = standLeft;
                            if (place_free(x - run,y)
                                || place_meeting(x - run, y, enemy)) {
                                x -= run;
                            }
                        }
                    } else {
                        if (abs(Player.x - x) &gt; run) {
                            sprite_index = standRight;
                            if (place_free(x + run, y) 
                                || place_meeting(x + run, y, enemy)) {
                                x += run;
                            }
                        }
                    }
                } else if (abs(Player.y - y) &lt; sprite_height) {
                    alarm[2] = room_speed * punchSpeed;
                    effectiveDamage = damage;
                    if(Player.earthAbility &amp;&amp; !earthAbility) {
                        effectiveDamage *= 0.7;
                    }
                    if (airAbility) {
                        if (Player.fireAbility || Player.earthAbility) {
                            Player.health -= effectiveDamage/2;
                        } else {
                            Player.health -= effectiveDamage;
                        }
                    } else if (waterAbility) {
                        if(Player.fireAbility || Player.earthAbility) {
                            Player.health -= effectiveDamage*2;
                        } else {
                            Player.health -= effectiveDamage;
                        }
                    } else if (fireAbility) {
                        if(left) {
                            enFireball = instance_create(x - 5, y + 8, fireball);
                        } else {
                            enFireball = instance_create(x + sprite_width + 5, y + 8, fireball);
                        }
                        enFireball.firedBy = id;
                    } else {
                        Player.health -= effectiveDamage;
                    }
                    punch = true;
                    if(left) {
                        sprite_index = punchLeft;
                    } else {
                        sprite_index = punchRight;
                    }
                }
            }
        } else {
            if(walkTimer &gt; 0) {
                walkTimer--;
            } else {
                walking = false;
                alarm[0] = irandom(room_speed);
            }
        
            if(walking) {
                if(walkDirection == 0) {
                    left = true;
                    right = false;
                    sprite_index = standLeft;
                    if (place_free(x - walk, y) || place_meeting(x - walk, y, enemy)) {
                        x -= walk;
                    } else {
                        x -= distance_to_object(instance_place(x - walk, y, all)) - 1;
                    }
                } else {
                    left = false;
                    right = true;
                    sprite_index = standRight;
                    if (place_free(x + walk, y) || place_meeting(x + walk, y, enemy)) {
                        x += walk;
                    } else {
                        x += distance_to_object(instance_place(x + walk, y, all)) - 1;
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_halign(fa_center);
//draw_text(x + sprite_width/2, y - sprite_height/2, instanceHealth);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
