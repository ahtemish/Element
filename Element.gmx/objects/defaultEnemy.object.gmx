<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>defaultEnemyStandLeft_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemy</parentName>
  <maskName>playerMask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial values

instanceHealth = 12;
runSpeed = 150 / room_speed;
walkSpeed = 60 / room_speed;
walking = false;
walkTimer = 0;
fall = 0;
fallMax = 600 / room_speed;
fallMult = 30 / room_speed;
left = true;
right = false;
dead = false;
hitByEarth = false;
hitByWater = false;

randomize();
alarm[0] = irandom(room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No longer slowed
hitByWater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start move

walkTimer =  room_speed / 2;
walking = true;
walkDirection = irandom(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if hit

if(!dead) {
    if(global.enemyHit) {
        if(global.enemyHitId == id) {
            if(global.enemyHitType == "air") {
                instanceHealth -= 2;
                global.enemyHit = false;
                global.enemyHitId = noone;
                global.enemyHitType = noone;
            } else if(global.enemyHitType == "earth") {
                instanceHealth -= 6;
                global.enemyHit = false;
                global.enemyHitId = noone;
                global.enemyHitType = noone;
                hitByEarth = true;  
            }  else if(global.enemyHitType == "water") {
                instanceHealth -= 4;
                global.enemyHit = false;
                global.enemyHitId = noone;
                global.enemyHitType = noone;
                hitByWater = true; 
                alarm[1] = room_speed * 2; 
            }
        }
    }
    if(place_meeting(x, y, fireball)) {
        instanceHealth -= 3;
        with(instance_place(x, y, fireball)) {
            instance_destroy();
        }
    }
}
    
if(instanceHealth &lt;= 0) {
    dead = true;
    instance_change(defaultEnemyDead, true);
}

colliding = instance_place(x, y, notPlayerSolids);

if(colliding != noone) {
    if(x != colliding.x) {
        if(x &lt; colliding.x + colliding.sprite_width/2) {
            x = colliding.x - 11;
        } else {
            x = colliding.x + 32;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check movement

if(!dead) {
    if(hitByEarth) {
        instance_change(defaultEnemyFlung, true);
    } else {
        run = runSpeed;
        walk = walkSpeed;
        if(hitByWater) {
            run /= 2;
            walk /= 2;
        }
        if (place_free(x, y + fallMult + fall)) {
            if (fall &lt; fallMax) {
                fall += fallMult;
            }
            y += fall;
        }
        else {
            fall = 0;
            
            if(distance_to_object(Player) &lt; 150) {
                if(Player.x &lt; x) {
                    left = true;
                    right = false;
                    if (place_free(x - run,y) &amp;&amp; abs(Player.x - x) &gt; run) {
                        sprite_index = defaultEnemyStandLeft_spr;
                        x -= run;
                    }
                } else {
                    left = false;
                    right = true;
                    if (place_free(x + run,y) &amp;&amp; abs(Player.x - x) &gt; run) {
                        sprite_index = defaultEnemyStandRight_spr;
                        x += run;
                    }
                }
            } else {
                if(walkTimer &gt; 0) {
                    walkTimer--;
                } else {
                    walking = false;
                    alarm[0] = irandom(room_speed);
                }
            
                if(walking) {
                    if(walkDirection == 0) {
                        left = true;
                        right = false;
                        sprite_index = defaultEnemyStandLeft_spr;
                        if (place_free(x - walk, y)) {
                            x -= walk;
                        } else {
                            x -= distance_to_object(instance_place(x - walk, y, all)) - 1;
                        }
                    } else {
                        left = false;
                        right = true;
                        sprite_index = defaultEnemyStandRight_spr;
                        if (place_free(x + walk, y)) {
                            x += walk;
                        } else {
                            x += distance_to_object(instance_place(x + walk, y, all)) - 1;
                        }
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
