<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>wyrmStandLeft_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>nonhittableEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial values

initial = true;
enemyType = "wyrm";

gameStarted = false;
fromDragon = false;

walking = false;
walkTimer = 0;
fall = 0;
fallMax = 600 / room_speed;
fallMult = 30 / room_speed;

left = true;
right = false;

dead = false;
hitByWater = false;
attack = false;
attackCooldown = false;
inWater = false;
inv = false;

airAbility = true;

hitByFireball = false;
minimumDistance = 32;
detectionDistance = 250;

attackSpeed = (1/2);
attackCooldownSpeed = (1/2);
damage = 4;
initialHealth = 15;
walkSpeed = 60 / room_speed;
runMult = 2;
standLeft = wyrmStandLeft_spr;
walkLeft = wyrmStandLeft_spr;
attackLeft = wyrmStandLeft_spr;
dieLeft = wyrmStandLeft_spr;
standRight = wyrmStandRight_spr;
walkRight = wyrmStandRight_spr;
attackRight = wyrmStandRight_spr;
dieRight = wyrmStandRight_spr;
walkImageSpeed = 4 / room_speed;
attackImageSpeed = walkImageSpeed;

instanceHealth = initialHealth;
sprite_index = standLeft;
runSpeed = walkSpeed * runMult;
runImageSpeed = walkImageSpeed * runMult;

randomize();
alarm[0] = irandom(room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can attack again

attackCooldown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End attack

if (!dead) {
    alarm[3] = attackCooldownSpeed * room_speed;
    attack = false;
    attackCooldown = true;
    if(hitByWater) {
        alarm[3] *= 2;
    }
    if(left) {
        sprite_index = standLeft;
    } else {
        sprite_index = standRight;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No longer slowed
hitByWater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start move

if(abs(Player.x - x) &gt; minimumDistance) {
    walkTimer =  room_speed;
    walking = true;
    walkDirection = irandom(1);
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if hit

if (!dead) {
    for(num = 0; num &lt; 5; num++) {
        if (global.enemyHitId[num] == id &amp;&amp; !inv) {
            inv = true;
            if (global.enemyHitType[num] == "air") {
                playerDamage = 2;
                hitByFireball = false;
            } else if (global.enemyHitType[num] == "earth") {
                playerDamage = 6;
                flung = true;
                flungBy = Player.id;
                hitByFireball = false;
            }  else if (global.enemyHitType[num] == "water") {
                playerDamage = 4;
                hitByFireball = false;
                hitByWater = true;
                alarm[1] = room_speed * 2; 
            }
            instanceHealth -= playerDamage;
            global.enemyHit[num] = false;
            global.enemyHitId[num] = noone;
            global.enemyHitType[num] = noone;
        }
    }
    if(place_meeting(x, y, fireball)) {
        conFireball = instance_place(x, y, fireball);
        if(conFireball.firedBy = Player) {
            instanceHealth -= 6;
            hitByFireball = true;
            with(conFireball) {
                instance_destroy();
            }
        }
    }
}
    
if(instanceHealth &lt;= 0 &amp;&amp; !dead) {
    Player.enemiesKilled[Player.numEnemiesKilled] = id;
    Player.numEnemiesKilled++;
    dead = true;
    instance_change(birdDead, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set correct values for enemy based on type

if(initial) {

        found = false;
        for(i = 0; i &lt; array_length_1d(global.enemies); i++) {
            if (global.enemies[i] = id)
                found = true;
        }
        if (!found)
            instance_destroy();
    
    initial = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check movement

if (place_meeting(x, y, water)) {
    inWater = true;
    fallMult = 15 / room_speed;
    fallMax = 300 / room_speed;
    run = runSpeed * 0.3;
    walk = walkSpeed * 0.3;
} else {
    run = runSpeed;
    walk = walkSpeed;
    inWater = false;
    fallMult = 30 / room_speed;
    fallMax = 600 / room_speed;
}


if(!dead) {
    if (hitByWater) {
        run /= 2;
        walk /= 2;
    }

    if (distance_to_object(Player) &lt; detectionDistance 
        &amp;&amp; !collision_line(x, y, Player.x, Player.y, terrain, false, true)) {
        
        if (Player.x &lt; x) {
            left = true;
            right = false;
        } else {
            left = false;
            right = true;
        }
            
        if(!attack) {
            if (abs(Player.x - x) &lt; minimumDistance 
                &amp;&amp; collision_rectangle(x - minimumDistance, y + ground.sprite_height * 4,
                x + minimumDistance, y + sprite_height + ground.sprite_height * 4,
                Player, false, true) &amp;&amp; !attackCooldown) {
                image_index = 0;
                 
                alarm[2] = room_speed * attackSpeed;
                attack = true;
                initialDamage = true;
                image_speed = attackImageSpeed;
                
                if (left) {
                    sprite_index = attackLeft;
                    path_start(wyrmSwoopLeft, 5, path_action_stop, false);
                } else {
                    sprite_index = attackRight;
                    path_start(wyrmSwoopRight, 5, path_action_stop, false);
                }
                    
            } else if (abs(Player.x - x) &gt;= minimumDistance) {
                image_speed = runImageSpeed;
                if (left) {
                    
                    if (place_free(x - run,y) || place_meeting(x - run, y, enemy)) {
                        sprite_index = walkLeft;
                        x -= run;
                    } else 
                        sprite_index = standLeft;
                } else {
                           
                    if (place_free(x + run, y) || place_meeting(x + run, y, enemy)) {
                        sprite_index = walkRight;
                        x += run;
                    } else
                        sprite_index = standRight;
                }
            } else 
                path_start(birdIdle, 2, path_action_stop, false);
        }
    } else {
        image_speed = walkImageSpeed;
        if(walkTimer &gt; 0)
            walkTimer--;
        else {
            if(left)
                sprite_index = standLeft;
            else
                sprite_index = standRight;
            walking = false;
            alarm[0] = irandom(room_speed);
        }
    
        if(walking) {
            if(walkDirection == 0) {
                left = true;
                right = false;
                if (place_free(x - walk, y) || place_meeting(x - walk, y, enemy)) {
                    sprite_index = walkLeft;
                    x -= walk;
                } else
                    sprite_index = standLeft;
            } else {
                left = false;
                right = true;
                if (place_free(x + walk, y) 
                     || place_meeting(x + walk, y, enemy)) {
                    sprite_index = walkRight;
                    x += walk;
                } else
                    sprite_index = standRight;
            }
        }
    }
}

if (!attack) {
    if (collision_line(x, y, x, y + ground.sprite_height * 4, terrain, false, true))
        y -= 2;
    else if (!place_meeting(x, y + ground.sprite_height * 4, terrain))
        y += 2;
}

if (place_meeting(x, y, Player) &amp;&amp; attack &amp;&amp; initialDamage) {
                
    effectiveDamage = damage;
    if(Player.earthAbility)
        effectiveDamage *= 0.7;
    if (Player.fireAbility || Player.earthAbility)
        effectiveDamage /= 2;
                    
    if(!Player.inv) {
        audio_play_sound(snd_playerDamaged, 10, false);
        Player.health -= effectiveDamage;
        Player.inv = true;
        Player.alarm[7] = room_speed * (1/4);
    }
    
    initialDamage = false;
}

if (fromDragon &amp;&amp; !instance_exists(Dragon))
    instanceHealth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>drawHealth</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
