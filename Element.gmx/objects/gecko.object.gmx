<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>geckoStandLeft_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>hittableEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial values

enemyType = "gecko";

initial = true;
gameStarted = false;

walking = false;
walkTimer = 0;

left = true;
right = false;

dead = false;
hitByWater = false;
attack = false;

airAbility = false;
earthAbility = false;
fireAbility = true;
waterAbility = false;

whipDamage = 4;
fireballDamage = 9;
stompDamage = 5;
swipeDamage = 2;
currentAttackDamage = 0;

initialHealth = 25;
instanceHealth = initialHealth;

standLeft = geckoStandLeft_spr;
walkLeft = geckoWalkLeft_spr;
tongueAttackLeft = geckoTongueAttackLeft_spr;
attackLeft = geckoAttackLeft_spr;
dieLeft = geckoDieLeft_spr;
standRight = geckoStandRight_spr;
walkRight = geckoWalkRight_spr;
tongueAttackRight = geckoTongueAttackRight_spr;
attackRight = geckoAttackRight_spr;
dieRight = geckoDieRight_spr;
sprite_index = standLeft;

randomize();
attackType = irandom(8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Air swipe

if (counter &lt; 2) {
    if (counter &lt; 1)
        Player.health -= effectiveDamage;
    counter++;
    alarm[4] = room_speed * (4/30);
} else {
    alarm[2] = room_speed * attackSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Can attack again

attack = false;
attackType = irandom(8);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End attack

if (!dead) {
    alarm[3] = room_speed * (16/30);
    /*if(hitByWater &amp;&amp; !waterAbility) {
        alarm[3] *= 2;
    }*/
    if(left) {
        sprite_index = standLeft;
    } else {
        sprite_index = standRight;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No longer slowed

hitByWater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if hit

if (!dead) {
    for(num = 0; num &lt; 5; num++) {
        if (global.enemyHitId[num] == id &amp;&amp; !inv) {
            inv = true;
            if (instance_exists(geckoTongue)) {
                with (geckoTongue) instance_destroy();
                alarm[2] = 1;
            }
            if (global.enemyHitType[num] == "air") {
                playerDamage = 2;
                hitByFireball = false;
                if(earthAbility) {
                    playerDamage *= 0.7;
                }
                if(fireAbility || earthAbility) {
                    playerDamage /= 2;
                }
            } else if (global.enemyHitType[num] == "earth") {
                playerDamage = 6;
                flung = true;
                flungBy = Player.id;
                hitByFireball = false;
            }  else if (global.enemyHitType[num] == "water") {
                playerDamage = 4;
                hitByFireball = false;
                if(!waterAbility) {
                    hitByWater = true;
                    alarm[1] = room_speed * 2; 
                }
                if(earthAbility) {
                    playerDamage *= 0.7;
                }
                if(fireAbility || earthAbility) {
                    playerDamage *= 2;
                }
            }
            instanceHealth -= playerDamage;
            global.enemyHit[num] = false;
            global.enemyHitId[num] = noone;
            global.enemyHitType[num] = noone;
        }
    }
    if(place_meeting(x, y, fireball)) {
        conFireball = instance_place(x, y, fireball);
        if(conFireball.firedBy = Player) {
            if (airAbility) {
                instanceHealth -= 6;
            } else if (earthAbility) {
                instanceHealth -= 1.05;
            } else if (waterAbility) {
                instanceHealth -= 2;
            } else {
                instanceHealth -= 3;
            }
            hitByFireball = true;
            with(conFireball) {
                instance_destroy();
            }
        }
    }
    CollisionChecking();
}
    
if(instanceHealth &lt;= 0) {
    if (fireAbility) {
        fireAbility = false;
        earthAbility = true;
        initialHealth = 25;
        instanceHealth = initialHealth;
        if (Player.airAbility)
            Player.hasKilledFireWithAir = true;
        else if (Player.waterAbility)
            Player.hasKilledFireWithWater = true;
        else if (Player.earthAbility)
            Player.hasKilledFireWithEarth = true;
        else
            Player.hasKilledFireWithFire = true;
    } else if (earthAbility) {
        earthAbility = false;
        airAbility = true;
        initialHealth = 25;
        instanceHealth = initialHealth;
        if (Player.airAbility)
            Player.hasKilledEarthWithAir = true;
        else if (Player.waterAbility)
            Player.hasKilledEarthWithWater = true;
        else if (Player.earthAbility)
            Player.hasKilledEarthWithEarth = true;
        else
            Player.hasKilledEarthWithFire = true;
    } else if (airAbility) {
        airAbility = false;
        waterAbility = true;
        initialHealth = 25;
        instanceHealth = initialHealth;
        if (Player.airAbility)
            Player.hasKilledAirWithAir = true;
        else if (Player.waterAbility)
            Player.hasKilledAirWithWater = true;
        else if (Player.earthAbility)
            Player.hasKilledAirWithEarth = true;
        else
            Player.hasKilledAirWithFire = true;
    } else {
        if (Player.airAbility)
            Player.hasKilledWaterWithAir = true;
        else if (Player.waterAbility)
            Player.hasKilledWaterWithWater = true;
        else if (Player.earthAbility)
            Player.hasKilledWaterWithEarth = true;
        else
            Player.hasKilledWaterWithFire = true;
        dead = true;
        with (geckoTongue) instance_destroy();
        instance_change(elementalEnemyDead, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if this should exist

if (initial) {
        found = false;
        for(i = 0; i &lt; array_length_1d(global.enemies); i++) {
            if (global.enemies[i] = id)
                found = true;
        }
        if (!found)
            instance_destroy();
    
    initial = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set correct values based on element

runMult = 2;
walkImageSpeed = 4 / room_speed;
attackImageSpeed = walkImageSpeed;
runImageSpeed = walkImageSpeed * runMult;

if (airAbility) {
    standLeft = geckoStandLeftAir_spr;
    walkLeft = geckoWalkLeftAir_spr;
    tongueAttackLeft = geckoTongueAttackLeftAir_spr;
    attackLeft = geckoAttackLeftAir_spr;
    dieLeft = geckoDieLeftAir_spr;
    standRight = geckoStandRightAir_spr;
    walkRight = geckoWalkRightAir_spr;
    tongueAttackRight = geckoTongueAttackRightAir_spr;
    attackRight = geckoAttackRightAir_spr;
    dieRight = geckoDieRightAir_spr;
    
    minimumDistance = 4;
    attackSpeed = (5/30);
    walkSpeed = 120 / room_speed;
    attackImageSpeed = 16 / room_speed;
} else if (earthAbility) {
    standLeft = geckoStandLeftEarth_spr;
    walkLeft = geckoWalkLeftEarth_spr;
    tongueAttackLeft = geckoTongueAttackLeftEarth_spr;
    attackLeft = geckoAttackLeftEarth_spr;
    dieLeft = geckoDieLeftEarth_spr;
    standRight = geckoStandRightEarth_spr;
    walkRight = geckoWalkRightEarth_spr;
    tongueAttackRight = geckoTongueAttackRightEarth_spr;
    attackRight = geckoAttackRightEarth_spr;
    dieRight = geckoDieRightEarth_spr;
    
    minimumDistance = 12;
    attackSpeed = (10/30);
    walkSpeed = 60 / room_speed;
} else if (waterAbility) {
    standLeft = geckoStandLeftWater_spr;
    walkLeft = geckoWalkLeftWater_spr;
    tongueAttackLeft = geckoTongueAttackLeftWater_spr;
    attackLeft = geckoAttackLeftWater_spr;
    dieLeft = geckoDieLeftWater_spr;
    standRight = geckoStandRightWater_spr;
    walkRight = geckoWalkRightWater_spr;
    tongueAttackRight = geckoTongueAttackRightWater_spr;
    attackRight = geckoAttackRightWater_spr;
    dieRight = geckoDieRightWater_spr;
    
    minimumDistance = 6;
    attackSpeed = (5/30);
    walkSpeed = 90 / room_speed;
} else if (fireAbility) {
    standLeft = geckoStandLeftFire_spr;
    walkLeft = geckoWalkLeftFire_spr;
    tongueAttackLeft = geckoTongueAttackLeftFire_spr;
    attackLeft = geckoAttackLeftFire_spr;
    dieLeft = geckoDieLeftFire_spr;
    standRight = geckoStandRightFire_spr;
    walkRight = geckoWalkRightFire_spr;
    tongueAttackRight = geckoTongueAttackRightFire_spr;
    attackRight = geckoAttackRightFire_spr;
    dieRight = geckoDieRightFire_spr;
    
    attackSpeed = (5/30);
    walkSpeed = 90 / room_speed;
}


runSpeed = walkSpeed * runMult;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check movement


run = runSpeed;
walk = walkSpeed;

if(!dead) {
    /*if (hitByWater &amp;&amp; !waterAbility) {
        run /= 2;
        walk /= 2;
    }*/
        
    if (Player.x &gt; 6400) {
        if (Player.x &lt; x) {
            left = true;
            right = false;
        } else {
            left = false;
            right = true;
        }
            
        if (!attack) {
            if (fireAbility) {
                if (attackType &lt; 4) {
                    image_index = 0;
                
                    destinationX = Player.x;
                    attack = true;
                    
                    nextTongue = instance_create(x, y + 16, geckoTongue);
                    nextTongue.destinationX = destinationX;
                    nextTongue.damage = whipDamage;
                    
                    if (left)
                        sprite_index = tongueAttackLeft;
                    else
                        sprite_index = tongueAttackRight;
                } else {
                    image_index = 0;
                 
                    alarm[2] = room_speed * attackSpeed;
                    
                    effectiveDamage = fireballDamage;
                    
                    if(Player.earthAbility &amp;&amp; !earthAbility) {
                        effectiveDamage *= 0.7;
                    }
                    if (airAbility) {
                        if (Player.fireAbility || Player.earthAbility) {
                            effectiveDamage /= 2;
                        }
                    } else if (waterAbility) {
                        if (Player.fireAbility || Player.earthAbility) {
                            effectiveDamage *= 2;
                        }
                    } else if (fireAbility) {
                        if (Player.earthAbility) {
                            effectiveDamage /= 2;
                        } else if (Player.waterAbility){
                            effectiveDamage /= 1.5;
                        } else if (Player.airAbility) {
                            effectiveDamage *= 2;
                        }
                    }
                    
                    if (left) {
                        enFireball = instance_create(x, y, fireball);
                    } else {
                        enFireball = instance_create(x + sprite_width, y, fireball);
                    }
                    enFireball.firedBy = enemy;
                    enFireball.damage = effectiveDamage;
                    attack = true;
                    image_speed = attackImageSpeed;
                    
                    if (left)
                        sprite_index = attackLeft;
                    else
                        sprite_index = attackRight;
                }
            } else {
                if (Player.x &lt; 7296 || attackType &lt; 3) {
                    image_index = 0;
                
                    destinationX = Player.x;
                    attack = true;
                    nextTongue = instance_create(x, y + 16, geckoTongue);
                    nextTongue.destinationX = destinationX;
                    nextTongue.damage = whipDamage;
                    
                    if (left)
                        sprite_index = tongueAttackLeft;
                    else
                        sprite_index = tongueAttackRight;
                } else if (collision_rectangle(x - minimumDistance, y,
                                               x, y + sprite_height, Player, false, true)
                                               || collision_rectangle(x + sprite_width, y, 
                                               x + sprite_width + minimumDistance, y + sprite_height, Player,
                                               false, true)) {
                    image_index = 0;
                 
                    if (airAbility) {
                        alarm[4] = room_speed * (4/30);
                        counter = 0;
                    } else
                        alarm[2] = room_speed * attackSpeed;
                    
                    if (fireAbility)
                        effectiveDamage = fireballDamage;
                    else if (earthAbility)
                        effectiveDamage = stompDamage;
                    else 
                        effectiveDamage = swipeDamage;
                    
                    if(Player.earthAbility &amp;&amp; !earthAbility)
                        effectiveDamage *= 0.7;
                    if (airAbility)
                        if (Player.fireAbility || Player.earthAbility)
                            effectiveDamage /= 2;
                    else if (waterAbility)
                        if (Player.fireAbility || Player.earthAbility)
                            effectiveDamage *= 2;
                    else if (fireAbility)
                        if (Player.earthAbility)
                            effectiveDamage /= 2;
                        else if (Player.waterAbility)
                            effectiveDamage /= 1.5;
                        else if (Player.airAbility)
                            effectiveDamage *= 2;
                
                    if (earthAbility) {
                        Player.flung = true;
                        Player.flungBy = id;
                        Player.flingInitial = true;
                    }
                    if (airAbility) {
                        audio_play_sound(snd_playerDamaged, 10, false);
                        Player.health -= effectiveDamage;
                    } else if(!Player.inv) {
                        audio_play_sound(snd_playerDamaged, 10, false);
                        Player.health -= effectiveDamage;
                        Player.inv = true;
                        Player.alarm[7] = room_speed * (1/2);
                    }
                    attack = true;
                    image_speed = attackImageSpeed;
                    
                    if (left)
                        sprite_index = attackLeft;
                    else
                        sprite_index = attackRight;
                } else if (collision_rectangle(x - minimumDistance, y - sprite_height,
                                               x + sprite_width + minimumDistance, y, 
                                               Player, false, true) == noone) {
                    image_speed = runImageSpeed;
                    if (left) {
                        
                        if ((place_free(x - run,y)
                             || place_meeting(x - run, y, enemy))
                             &amp;&amp; place_meeting(x - run - sprite_width,
                             y + 64, terrain)) {
                            sprite_index = walkLeft;
                            x -= run;
                        } else
                            sprite_index = standLeft;
                    } else {
                        if ((place_free(x + run, y)
                             || place_meeting(x + run, y, enemy))
                             &amp;&amp; place_meeting(x + run + sprite_width, 
                             y + 64, terrain)) {
                         
                            sprite_index = walkRight;
                            x += run;
                        } else
                            sprite_index = standRight;
                    }
                } else {
                    if (left) {
                        sprite_index = standLeft;
                    } else {
                        sprite_index = standRight;
                    }
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>drawHealth</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
