<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>standRightWater_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>playerMask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset values

initialHealth = 40;

gameStarted = false;
drawElementChart = false;

jump = 0;
fall = 0;
fallMax = 600 / room_speed;
fallMult = 30 / room_speed;
movement = 120 / room_speed;
waterJump = 0;
    
left = false;
right = true;
runLeft = false;
runRight = false;
canRunLeft = false;
canRunRight = false;
    
punch = false;
ladder = false;
inWater = false;
boulderMove = false;
dash = false;
dashCooldown = false;
dead = false;
flung = false;
flungBy = noone;
inv = false;
flingInitial = false;
onVine = false;
initialVine = false;
hitByTongue = false;
attackCount = 0;

for(i = 0; i &lt; 6; i++) {
    global.enemyHit[i] = false;
    global.enemyHitId[i] = noone;
    global.enemyHitType[i] = noone;
}
    
instance_deactivate_object(falseTrapDoor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can be hit again

inv = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dash cooldown

alarm[5] = room_speed * (15/30);
dashCooldown = true;
dash = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can dash again

dashCooldown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can now move

boulderMove = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End punch
punch = false;
drawWhip = false;

with (enemy) inv = false;

if(left) 
    sprite_index = standLeft;
else
    sprite_index = standRight;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can no longer run
runRight = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can no longer run
canRunLeft = false;
runLeft = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reactivate trapDoors
instance_activate_object(trapDoor);
instance_deactivate_object(falseTrapDoor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unstick from collisions

if (dash) {
    CollisionCheckingDash();
} else {
    CollisionChecking();
}

possibleBounce = instance_place(x, y + sprite_width, hittableEnemy);
if (possibleBounce != noone) {
    if (!possibleBounce.dead) {
        flung = true;
        FlingInitialOnEnemy();
        if (!inv) {
            health -= 0.5;
            inv = true;
        }
        alarm[7] = room_speed * (1/2);
    }
}

if (place_meeting(x, y, fireball)) {
    conFireball = instance_place(x, y, fireball);
    if(conFireball.firedBy = enemy) {
        
        effectiveDamage = conFireball.damage;
        if(Player.earthAbility &amp;&amp; !earthAbility)
            effectiveDamage *= 0.7;
        if (airAbility)
            if (Player.fireAbility || Player.earthAbility)
                effectiveDamage /= 2;
        else if (waterAbility)
            if (Player.fireAbility || Player.earthAbility)
                effectiveDamage *= 2;
        else if (fireAbility) {
            if (Player.earthAbility)
                effectiveDamage /= 2;
            else if (Player.waterAbility)
                effectiveDamage /= 1.5;
            else if (Player.airAbility)
                effectiveDamage *= 2;
        }
        
        health -= effectiveDamage;
        with(conFireball) {
            instance_destroy();
        }
    }
}

if(health &lt;= 0) {
    dead = true;
    instance_create(x, y, mouseFollow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset hit values

for(i = 0; i &lt; 6; i++) {
    global.enemyHit[i] = false;
    global.enemyHitId[i] = noone;
    global.enemyHitType[i] = noone;
}

if (airAbility) {
    standLeft = standLeftAir_spr;
    walkLeft = standLeftAir_spr;
    punchLeft = punchLeftAir_spr;
    dieLeft = dieLeftAir_spr;
    standRight = standRightAir_spr;
    walkRight = standRightAir_spr;
    punchRight = punchRightAir_spr;
    dieRight = dieRightAir_spr;
} else if (earthAbility) {
    standLeft = standLeftEarth_spr;
    walkLeft = standLeftEarth_spr;
    punchLeft = punchLeftEarth_spr;
    dieLeft = dieLeftEarth_spr;
    standRight = standRightEarth_spr;
    walkRight = standRightEarth_spr;
    punchRight = punchRightEarth_spr;
    dieRight = dieRightEarth_spr;
} else if (waterAbility) {
    standLeft = standLeftWater_spr;
    walkLeft = standLeftWater_spr;
    punchLeft = punchLeftWater_spr;
    dieLeft = dieLeftWater_spr;
    standRight = standRightWater_spr;
    walkRight = standRightWater_spr;
    punchRight = punchRightWater_spr;
    dieRight = dieRightWater_spr;
} else if (fireAbility) {
    standLeft = standLeftFire_spr;
    walkLeft = standLeftFire_spr;
    punchLeft = punchLeftFire_spr;
    dieLeft = dieLeftFire_spr;
    standRight = standRightFire_spr;
    walkRight = standRightFire_spr;
    punchRight = punchRightFire_spr;
    dieRight = dieRightFire_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  Do gravity

if (x &gt;= room_width)
    GoToNextLevel();

if(place_meeting(x, y, water)) {
    inWater = true;
    fallMult = 15 / room_speed;
    fallMax = 300 / room_speed;
    if (waterAbility)
        fall = 0;
    else if (fireAbility)
        health -= 6 / room_speed;
} else {
    inWater = false;
    fallMult = 30 / room_speed;
    fallMax = 600 / room_speed;
    
    if (place_meeting(x, y, waterSpout)) {
        with (instance_place(x, y, waterSpout)) {
            if (Player.health &lt; Player.initialHealth &amp;&amp; Player.waterAbility) {
                Player.health += healRate;
                instanceHealth -= healRate;
            }
            if (instanceHealth &lt; initialHealth / 2)
                sprite_index = waterSpoutHalf_spr;
            if (instanceHealth &lt;= 0)
                instance_destroy();
        }
    }
}

if (flung)
    if (!earthAbility) {
        if (flungBy != noone) {
            if (flingInitial) {
                FlingInitial(Player);
                flingInitial = false;
            }
            FlingEntity(Player);
        } else {
            FlingOnEnemy();
        }
    } else {
        if(flungBy = noone)
            FlingOnEnemy();
        else {
            flung = false;
            flungBy = noone;
        }
    }
else {
    flungBy = noone;
    if (onVine) {
        if(left)
            image_angle = point_direction(x, y, thisVine.x, thisVine.y) - 180;
        else
            image_angle = point_direction(x, y, thisVine.x, thisVine.y);
        if (swing.path_position &gt; 0.7 || place_meeting(x, y, terrain)) {
            path_end();
            onVine = false;
            thisVine = noone;
            image_angle = 0;
        } 
    } else if (hitByTongue)
        if (distance_to_object(gecko) &lt; 8 || !instance_exists(geckoTongue))
            hitByTongue = false;
        else
            x += geckoTongue.sprite_width;
            
    else if (!dash) {
        if (!ladder) {
            if ((inWater &amp;&amp; (!waterAbility || place_empty(x, y - 16))) 
                 || (!inWater &amp;&amp; waterJump &lt;= 0)) {
                if(jump) {
                    jumpHeight = Jump(jumpHeight);
                } else {
                    Gravity();
                }
            }
            if(waterJump &gt; 0) {
                waterJump = Jump(waterJump);
            }
        }
    } else {
        if(inWater) {
            effectiveSpeed = movement * 0.3;
        } else {
            effectiveSpeed = movement * 1.5;
        }
        effectiveSpeed *= 11;
        if(left) {
            run_left(effectiveSpeed);
        } else {
            run_right(effectiveSpeed);
        }
    }
}
if(place_meeting(x, y, trapDoor)) {
    instance_deactivate_object(trapDoor);
    instance_activate_object(falseTrapDoor);
    alarm[0] = room_speed / 3;
}

if (punch) {
    if (!onVine)
        if (left)
            sprite_index = punchLeft;
        else
            sprite_index = punchRight;
    
    if (waterAbility)
        waterAttack();
    else if (airAbility)
        airAttack();
    else if (earthAbility)
        earthAttack();
    else if (fireAbility)
        fireAttack();
}

if (!place_meeting(x, y + sprite_height, terrain))
    alarm[5]++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="deadAirElemental">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hasAir = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="5" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swim up

if(!dead &amp;&amp; !flung) {
    if (inWater &amp;&amp; waterAbility) {
        if (!place_empty(x, y - 14)) {
            if (place_free(x, y - movement)) {
                y -= movement;
            } else {
                y -= distance_to_object(instance_place(x, y - movement, notPlayerSolids)) - 1;
            }
        } else {
            waterJump = 9;
        }
    }
    if (ladder) {
        if (place_meeting(x - 1, y, terrain) || place_meeting(x + sprite_width, y, terrain)) { 
            y -= 90 / room_speed;
        } else if (place_meeting(x - 1, y + 90 / room_speed, terrain)) {
            x -= 1;
            ladder = false;
        } else if (place_meeting(x + 1, y + 90 / room_speed, terrain)) {
            x += 1;
            ladder = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; !hitByTongue) {
    if(place_empty(x, y - 16) &amp;&amp; waterAbility &amp;&amp; inWater) {
            waterJump = 9;
    }
    if((!inWater || (inWater &amp;&amp; !waterAbility)) &amp;&amp; !boulderMove) {
        if(!place_free(x, y + 1)) {
            jump = true;
            fall = 0;
            if(airAbility) {
                jumpHeight = 11;
            } else if(earthAbility) {
                jumpHeight = 6;
            } else {
                jumpHeight = 9;
            }
            if(inWater) {
                jumpHeight /= 2;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swim down

if(!dead &amp;&amp; !flung) {
    if(inWater &amp;&amp; waterAbility) {
        if(place_free(x, y + movement)) {
            y += movement;
        } else {
            y += distance_to_object(instance_place(x, y + movement, notPlayerSolids)) - 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show element chart

drawElementChart = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move right

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; !hitByTongue) {
    right = true;
    left = false;
    if(!punch)
        sprite_index = walkRight;

    if(airAbility) {
        if(inWater) {
            effectiveSpeed = movement * 0.3;
        } else {
            effectiveSpeed = movement * 1.5;
        }
    } else if(earthAbility) {
        effectiveSpeed = movement * 0.7;
    } else if(waterAbility) {
        effectiveSpeed = movement;
    } else {
        if(inWater) {
            effectiveSpeed = movement * 0.3;
        } else {
            effectiveSpeed = movement;
        }
    }
    
    if(runRight) {
        effectiveSpeed *= 1.5;
        alarm[2] += room_speed / 30;
    }

    if ((airAbility &amp;&amp; !dash) || !airAbility) {
        run_right(effectiveSpeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move left

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; !hitByTongue) {
    right = false;
    left = true;
    if(!punch)
        sprite_index = walkLeft;

    if(airAbility) {
        if(inWater) {
            effectiveSpeed = movement * 0.3;
        } else {
            effectiveSpeed = movement * 1.5;
        }
    } else if(earthAbility) {
        effectiveSpeed = movement * 0.7;
    } else if(waterAbility) {
        effectiveSpeed = movement;
    } else {
        if(inWater) {
            effectiveSpeed = movement * 0.3;
        } else {
            effectiveSpeed = movement;
        }
    }
    
    if(runLeft) {
        effectiveSpeed *= 1.5;
        alarm[1] += room_speed / 30;
    }

    if ((airAbility &amp;&amp; !dash) || !airAbility) {
        run_left(effectiveSpeed);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Fire

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; hasFire) {
    airAbility = false;
    earthAbility = false;
    waterAbility = false;
    fireAbility = true;
    
    if (left)
        sprite_index = standLeftFire_spr;
    else
        sprite_index = standRightFire_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Earth

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; hasEarth) {
    airAbility = false;
    earthAbility = true;
    waterAbility = false;
    fireAbility = false;
    
    if (left)
        sprite_index = standLeftEarth_spr;
    else
        sprite_index = standRightEarth_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Water

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; hasWater) {
    airAbility = false;
    earthAbility = false;
    waterAbility = true;
    fireAbility = false;
    
    if (left)
        sprite_index = standLeftWater_spr;
    else
        sprite_index = standRightWater_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate air

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; hasAir) {
    airAbility = true;
    earthAbility = false;
    waterAbility = false;
    fireAbility = false;
    
    if (left)
        sprite_index = standLeftAir_spr;
    else
        sprite_index = standRightAir_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack

if(!dead &amp;&amp; !flung &amp;&amp; !onVine &amp;&amp; attackCount = 0) {
    if(!punch) {
        attackCount++;
        num = 0;
        punch = true;
        
        if(airAbility) {
            alarm[3] = room_speed * (4/30);
            airAttack();
        } else if(earthAbility) {
            alarm[3] = room_speed * (12/30);
            earthAttack();
        } else if(waterAbility) {
            alarm[3] = room_speed * (8/30);
            instance_create(x, y, waterwhip);
            waterAttack();
        } else {
            alarm[3] = room_speed * (8/30);
            fireAttack();
        }
    }
} else if (onVine &amp;&amp; swing.path_position &gt; 0.5) {
    waterAttack();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dash

if (airAbility &amp;&amp; !dash &amp;&amp; !dashCooldown &amp;&amp; !flung &amp;&amp; !dead) {
    alarm[6] = room_speed * (3/30);
    dash = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset from last checkpoint

if (initial)
    initial = false;
else {
    dead = false;
    health = global.roomStartHealth;
    x = global.roomStartX;
    y = global.roomStartY;
    hasWater = global.roomStartHasWater;
    hasAir = global.roomStartHasAir;
    hasEarth = global.roomStartHasEarth;
    hasFire = global.roomStartHasFire;
    hasKilledAirWithWater = global.roomStartHasKilledAirWithWater;
    hasKilledWaterWithWater = global.roomStartHasKilledWaterWithWater;
    hasKilledEarthWithWater = global.roomStartHasKilledEarthWithWater;
    hasKilledFireWithWater = global.roomStartHasKilledFireWithWater;
    hasKilledAirWithFire = global.roomStartHasKilledAirWithFire;
    hasKilledWaterWithFire = global.roomStartHasKilledWaterWithFire;
    hasKilledEarthWithFire = global.roomStartHasKilledEarthWithFire;
    hasKilledFireWithFire = global.roomStartHasKilledFireWithFire;
    hasKilledAirWithEarth = global.roomStartHasKilledAirWithEarth;
    hasKilledWaterWithEarth = global.roomStartHasKilledWaterWithEarth;
    hasKilledEarthWithEarth = global.roomStartHasKilledEarthWithEarth;
    hasKilledFireWithEarth = global.roomStartHasKilledFireWithEarth;
    hasKilledAirWithAir = global.roomStartHasKilledAirWithAir;
    hasKilledWaterWithAir = global.roomStartHasKilledWaterWithAir;
    hasKilledEarthWithAir = global.roomStartHasKilledEarthWithAir;
    hasKilledFireWithAir = global.roomStartHasKilledFireWithAir;
        
    waterAbility = false;
    airAbility = false;
    earthAbility = false;
    fireAbility = false;
    if (global.roomStartAbility = "water")
        waterAbility = true;
    else if (global.roomStartAbility = "air")
        airAbility = true;
    else if (global.roomStartAbility = "earth")
        earthAbility = true;
    else
        fireAbility = true;
}

if (room = global.lastRoom)
    roomCount++;
else
    roomCount = 0;
    
global.lastRoom = room;

if (roomCount = 0)
    SaveRoom();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initial values

waterAbility = true;
airAbility = false;
earthAbility = false;
fireAbility = false;
hasWater = true;
hasAir = true;
hasEarth = true;
hasFire = true;
hasKilledAirWithWater = false;
hasKilledWaterWithWater = false;
hasKilledEarthWithWater = false;
hasKilledFireWithWater = false;
hasKilledAirWithFire = false;
hasKilledWaterWithFire = false;
hasKilledEarthWithFire = false;
hasKilledFireWithFire = false;
hasKilledAirWithEarth = false;
hasKilledWaterWithEarth = false;
hasKilledEarthWithEarth = false;
hasKilledFireWithEarth = false;
hasKilledAirWithAir = false;
hasKilledWaterWithAir = false;
hasKilledEarthWithAir = false;
hasKilledFireWithAir = false;
    
health = initialHealth;
    
numEnemiesKilled = 0;
initial = true;

EndOfRoom();

global.roomCount = 0;
global.lastRoom = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &lt; room_width &amp;&amp; x &gt; 0)
    health = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(health &gt; 0) {
    middleW = view_xport + (view_wport / 2);
    draw_set_halign(fa_center);
    //draw_text(middleW - 48, view_yport + 83, "Health:");
    //draw_text(middleW, view_yport + 83, health);
    draw_healthbar(middleW + 40, view_yport + 38, middleW + 120, view_yport + 50, health * 100/initialHealth, c_black, c_red, c_green, 0, true, true);
    draw_healthbar(middleW - 40, view_yport + 38, middleW - 80, view_yport + 50, alarm[5] * 100/(room_speed * (15/30)), c_black, c_aqua, c_aqua, 0, false, true);
    
    draw_sprite(elementHolder_spr, 0, view_xport + (view_wport / 2), view_yport + 109);
    
    
    if (hasWater) {
        if(waterAbility)
            draw_sprite(waterElementActive_spr, 0, view_xport + (view_wport / 2), view_yport + 109); 
        else
            draw_sprite(waterElementActive_spr, 0, view_xport + (view_wport / 2), view_yport + 45);
    } 
    if (hasAir) {
        if(airAbility)
            draw_sprite(airElementActive_spr, 0, view_xport + (view_wport / 2), view_yport + 109);
        else
            draw_sprite(airElementActive_spr, 0, view_xport + (view_wport / 2) - 64, view_yport + 109);
    }
    if (hasEarth) {
        if(earthAbility)
            draw_sprite(earthElementActive_spr, 0, view_xport + (view_wport / 2), view_yport + 109);
        else
            draw_sprite(earthElementActive_spr, 0, view_xport + (view_wport / 2) + 64, view_yport + 109);
    }
    if (hasFire) {
        if (fireAbility)
            draw_sprite(fireElementActive_spr, 0, view_xport + (view_wport / 2), view_yport + 109);
        else
            draw_sprite(fireElementActive_spr, 0, view_xport + (view_wport / 2), view_yport + 173);
    }
    
    if (drawElementChart) {
        if (hasWater) {
            draw_sprite_ext(waterElement_spr, 0, view_xport + (view_wport / 2) - 111.5, view_yport + (view_hport / 2) - 78.5, 3.98, 2.76, 0, c_white, 1);
            draw_sprite_ext(waterElementActive_spr, 0, view_xport + (view_wport / 2) - 202, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithWater)
                draw_sprite_ext(airElementActive_spr, 0, view_xport + (view_wport / 2) - 134, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledWaterWithWater)
                draw_sprite_ext(waterElementActive_spr, 0, view_xport + (view_wport / 2) - 99, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledEarthWithWater)
                draw_sprite_ext(earthElementActive_spr, 0, view_xport + (view_wport / 2) - 134, view_yport + (view_hport / 2) - 126.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledFireWithWater)
                draw_sprite_ext(fireElementActive_spr, 0, view_xport + (view_wport / 2) - 99, view_yport + (view_hport / 2) - 126.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithWater || hasKilledWaterWithWater)
                draw_text(view_xport + (view_wport / 2) - 162, view_yport + (view_hport / 2) - 86.5, "*1");
            if (hasKilledEarthWithWater || hasKilledFireWithWater)
                draw_text(view_xport + (view_wport / 2) - 162, view_yport + (view_hport / 2) - 132.5, "*2");
        }
        if (hasAir) {
            draw_sprite_ext(airElement_spr, 0, view_xport + (view_wport / 2) - 111.5, view_yport + (view_hport / 2) + 78.5, 3.98, 2.76, 0, c_white, 1);
            draw_sprite_ext(airElementActive_spr, 0, view_xport + (view_wport / 2) - 202, view_yport + (view_hport / 2) + 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithAir)
                draw_sprite_ext(airElementActive_spr, 0, view_xport + (view_wport / 2) - 134, view_yport + (view_hport / 2) + 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledWaterWithAir)
                draw_sprite_ext(waterElementActive_spr, 0, view_xport + (view_wport / 2) - 99, view_yport + (view_hport / 2) + 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledEarthWithAir)
                draw_sprite_ext(earthElementActive_spr, 0, view_xport + (view_wport / 2) - 134, view_yport + (view_hport / 2) + 126.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledFireWithAir)
                draw_sprite_ext(fireElementActive_spr, 0, view_xport + (view_wport / 2) - 99, view_yport + (view_hport / 2) + 126.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithAir || hasKilledWaterWithAir)
                draw_text(view_xport + (view_wport / 2) - 162, view_yport + (view_hport / 2) + 70.5, "*1");
            if (hasKilledEarthWithAir || hasKilledFireWithAir)
                draw_text(view_xport + (view_wport / 2) - 162, view_yport + (view_hport / 2) + 116.5, "/2");
        }
        if (hasEarth) {
            draw_sprite_ext(earthElement_spr, 0, view_xport + (view_wport / 2) + 111.5, view_yport + (view_hport / 2) - 78.5, 3.98, 2.76, 0, c_white, 1);
            draw_sprite_ext(earthElementActive_spr, 0, view_xport + (view_wport / 2) + 202, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithEarth)
                draw_sprite_ext(airElementActive_spr, 0, view_xport + (view_wport / 2) + 134, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledWaterWithEarth)
                draw_sprite_ext(waterElementActive_spr, 0, view_xport + (view_wport / 2) + 99, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledEarthWithEarth)
                draw_sprite_ext(earthElementActive_spr, 0, view_xport + (view_wport / 2) + 64, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledFireWithEarth)
                draw_sprite_ext(fireElementActive_spr, 0, view_xport + (view_wport / 2) + 29, view_yport + (view_hport / 2) - 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithEarth || hasKilledWaterWithEarth || hasKilledEarthWithEarth || hasKilledFireWithEarth)
                draw_text(view_xport + (view_wport / 2) + 162, view_yport + (view_hport / 2) - 86.5, "*1");
        }
        if (hasFire) {
            draw_sprite_ext(fireElement_spr, 0, view_xport + (view_wport / 2) + 111.5, view_yport + (view_hport / 2) + 78.5, 3.98, 2.76, 0, c_white, 1);
            draw_sprite_ext(fireElementActive_spr, 0, view_xport + (view_wport / 2) + 202, view_yport + (view_hport / 2) + 78.5, 0.5, 0.5, 0, c_white, 1);
            if (hasKilledAirWithFire) {
                draw_sprite_ext(airElementActive_spr, 0, view_xport + (view_wport / 2) + 134, view_yport + (view_hport / 2) + 40.5, 0.5, 0.5, 0, c_white, 1);
                draw_text(view_xport + (view_wport / 2) + 162, view_yport + (view_hport / 2) + 30.5, "*2");
            }
            if (hasKilledWaterWithFire) {
                draw_sprite_ext(waterElementActive_spr, 0, view_xport + (view_wport / 2) + 134, view_yport + (view_hport / 2) + 126.5, 0.5, 0.5, 0, c_white, 1);
                draw_text(view_xport + (view_wport / 2) + 164, view_yport + (view_hport / 2) + 116.5, "*2/3");
            } 
            if (hasKilledEarthWithFire) {
                draw_sprite_ext(earthElementActive_spr, 0, view_xport + (view_wport / 2) + 64, view_yport + (view_hport / 2) + 126.5, 0.5, 0.5, 0, c_white, 1);
                draw_text(view_xport + (view_wport / 2) + 90, view_yport + (view_hport / 2) + 116.5, "/2");
            }
            if (hasKilledFireWithFire) {
                draw_sprite_ext(fireElementActive_spr, 0, view_xport + (view_wport / 2) + 134, view_yport + (view_hport / 2) + 78.5, 0.5, 0.5, 0, c_white, 1);
                draw_text(view_xport + (view_wport / 2) + 162, view_yport + (view_hport / 2) + 70.5, "*1");
            }
                
        }
        
    }
} else {
    draw_set_alpha(0.5);
    draw_rectangle_colour(view_xport, view_yport, view_xport + view_wport, view_yport + view_hport, c_black, c_black, c_black, c_black, false);
    instance_create(x, y, button);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_text(view_xport + view_wport / 2, view_yport + view_hport / 2, "Restart?");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drop

if(!dead &amp;&amp; !flung) {
    if(place_meeting(x, y + 1, trapDoor) &amp;&amp; !ladder) {
        instance_deactivate_object(trapDoor);
        instance_activate_object(falseTrapDoor);
        alarm[0] = room_speed / 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start timer on reactivation
alarm[0] = room_speed / 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawElementChart = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start run timer

runRight = true;
alarm[2] = room_speed * (10/30);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start run timer

runLeft = true;
alarm[1] = room_speed * (10/30);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can attack again

attackCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
