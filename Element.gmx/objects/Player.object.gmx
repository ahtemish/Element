<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>standRightAir_spr</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>playerMask_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initiate variables
{
    jump = 0;
    fall = 0;
    fallMax = 20;
    fallMult = 1;
    movement = 4;
    left = false;
    right = true;
    runLeft = false;
    runRight = false;
    punch = false;
    airAbility = true;
    earthAbility = false;
    waterAbility = false;
    fireAbility = false;
    ladder = false;
    inWater = false;
    waterJump = 0;
    boulderMove = false;
    
    global.enemyHit = false;
    global.enemyHitId = noone;
    global.enemyHitType = noone;
    
    instance_deactivate_object(falseTrapDoor);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can now move

boulderMove = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End punch
punch = false;

if(airAbility) {
    if(left) {
        sprite_index = standLeftAir_spr;
    } else {
        sprite_index = standRightAir_spr;
    }
} else if(earthAbility) {
    if(left) {
        sprite_index = standLeftEarth_spr;
    } else {
        sprite_index = standRightEarth_spr;
    }
} else if(waterAbility) {
    if(left) {
        sprite_index = standLeftWater_spr;
    } else {
        sprite_index = standRightWater_spr;
    }
} else {
    if(left) {
        sprite_index = standLeftFire_spr;
    } else {
        sprite_index = standRightFire_spr;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can no longer run
runRight = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Can no longer run
runLeft = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reactivate trapDoors
instance_activate_object(trapDoor);
instance_deactivate_object(falseTrapDoor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///  Do gravity

if(place_meeting(x, y, water)) {
    inWater = true;
    fallMult = 0.5;
    fallMax = 5;
    if(waterAbility) {
        fall = 0;
    }
} else {
    inWater = false;
    fallMult = 1;
    fallMax = 20;
}

if(!ladder) {
    if((inWater &amp;&amp; (!waterAbility || place_empty(x, y - 16))) 
        || (!inWater &amp;&amp;waterJump &lt;= 0)) {
        if(jump) {
            if(jumpHeight == 0) {
                jump = false;
            } else {
                if(place_free(x, y - jumpHeight)) {
                    y -= jumpHeight;
                    jumpHeight--;
                } else {
                    if(place_meeting(x, y - jumpHeight, trapDoor)) {
                        y -= jumpHeight;
                        jumpHeight--;
                        instance_deactivate_object(trapDoor);
                        instance_activate_object(falseTrapDoor);
                        alarm[0] = 10;
                    } else {
                        y -= (distance_to_object(instance_nearest(x, y - jumpHeight, notPlayerSolids)) - 1);
                        jumpHeight = 0;
                    }
                }            
            }
        } else {
            if (place_free(x,y + fallMult + fall)) {
                if (fall &lt; fallMax) {
                    fall += fallMult;
                }
                y += fall;
            }
            else {
                fall = 0;
            }
        }
    }
    
    if(waterJump &gt; 0) {
        if(place_free(x, y - waterJump)) {
            y -= waterJump;
            waterJump--;
        } else {
            y -= (distance_to_object(instance_nearest(x, y - waterJump, notPlayerSolids)) - 1);
            waterJump = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swim down

if(inWater &amp;&amp; waterAbility) {
    if(place_free(x, y + movement)) {
        y += movement;
    } else {
        y += distance_to_object(instance_place(x, y + movement, notPlayerSolids)) - 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move right
right = true;
left = false;

if(!punch) {
    if(airAbility) {
        sprite_index = standRightAir_spr;
    } else if(earthAbility) {
        sprite_index = standRightEarth_spr;
    } else if(waterAbility) {
        sprite_index = standRightWater_spr;
    } else {
        sprite_index = standRightFire_spr;
    }
}

if(airAbility) {
    if(inWater) {
        effectiveSpeed = movement * 0.3;
    } else {
        effectiveSpeed = movement * 1.5;
    }
} else if(earthAbility) {
    effectiveSpeed = movement * 0.7;
} else if(waterAbility) {
    effectiveSpeed = movement;
} else {
    if(inWater) {
        effectiveSpeed = movement * 0.3;
    } else {
        effectiveSpeed = movement;
    }
}
    
if(runRight) {
    effectiveSpeed *= 1.5;
    alarm[2]++;
}
if(!boulderMove) {
    if (place_free(x + effectiveSpeed, y)) {
        x += effectiveSpeed;
        ladder = false;
    }  else if(place_meeting(x + effectiveSpeed, y, boulder) &amp;&amp; earthAbility) {
        alarm[4] = 10;
        boulderMove = true;
        with(instance_nearest(x + effectiveSpeed, y, boulder)) {
            moveRight = true;
            alarm[0] = 10;
        }
        runRight = false;
    } else {
        if(place_meeting(x + effectiveSpeed, y, ladderRight)) {
            x += distance_to_object(instance_place(x + effectiveSpeed, y, ladderRight)) - 4;
            y -= 3;
            ladder = true;
            runRight = false;
        } else {
            x += distance_to_object(instance_place(x + effectiveSpeed, y, notPlayerSolids)) - 1;
            ladder = false;
            runRight = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Swim up

if(inWater &amp;&amp; waterAbility) {
    if(!place_empty(x, y - 14)) {
        if(place_free(x, y - movement)) {
            y -= movement;
        } else {
            y -= distance_to_object(instance_place(x, y - movement, notPlayerSolids)) - 1;
        }
    } else {
        waterJump = 9;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move left
right = false;
left = true;

if(!punch) {
    if(airAbility) {
        sprite_index = standLeftAir_spr;
    } else if(earthAbility) {
        sprite_index = standLeftEarth_spr;
    } else if(waterAbility) {
        sprite_index = standLeftWater_spr;
    } else {
        sprite_index = standLeftFire_spr;
    }
}

if(airAbility) {
    if(inWater) {
        effectiveSpeed = movement * 0.3;
    } else {
        effectiveSpeed = movement * 1.5;
    }
} else if(earthAbility) {
    effectiveSpeed = movement * 0.7;
} else if(waterAbility) {
    effectiveSpeed = movement;
} else {
    if(inWater) {
        effectiveSpeed = movement * 0.3;
    } else {
        effectiveSpeed = movement;
    }
}
    
if(runLeft) {
    effectiveSpeed *= 1.5;
    alarm[1]++;
}
if(!boulderMove) {
    if (place_free(x - effectiveSpeed,y)) {
        x -= effectiveSpeed;
        ladder = false;
    } else if(place_meeting(x - effectiveSpeed, y, boulder) &amp;&amp; earthAbility) {
        alarm[4] = 10;
        boulderMove = true;
        with(instance_nearest(x - effectiveSpeed, y, boulder)) {
            moveLeft = true;
            alarm[0] = 10;
        }
        runLeft = false;
    }else {
        if(place_meeting(x - effectiveSpeed, y, ladderLeft)) {
            x -= (distance_to_object(instance_place(x - effectiveSpeed, y, ladderLeft)) - 4);
            y -= 3;
            ladder = true;
            runLeft = false;
        } else {
            x -= distance_to_object(instance_place(x - effectiveSpeed, y, notPlayerSolids)) - 1;
            ladder = false;
            runLeft = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Fire

airAbility = false;
earthAbility = false;
waterAbility = false;
fireAbility = true;

if(left) {
    sprite_index = standLeftFire_spr;
} else {
    sprite_index = standRightFire_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Water

airAbility = false;
earthAbility = false;
waterAbility = true;
fireAbility = false;

if(left) {
    sprite_index = standLeftWater_spr;
} else {
    sprite_index = standRightWater_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Earth

airAbility = false;
earthAbility = true;
waterAbility = false;
fireAbility = false;

if(left) {
    sprite_index = standLeftEarth_spr;
} else {
    sprite_index = standRightEarth_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate air

airAbility = true;
earthAbility = false;
waterAbility = false;
fireAbility = false;

if(left) {
    sprite_index = standLeftAir_spr;
} else {
    sprite_index = standRightAir_spr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drop
if(place_meeting(x, y + 1, trapDoor)) {
    instance_deactivate_object(trapDoor);
    instance_activate_object(falseTrapDoor);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump

if(place_empty(x, y - 16) &amp;&amp; waterAbility &amp;&amp; inWater) {
        waterJump = 9;
}
if((!inWater || (inWater &amp;&amp; !waterAbility)) &amp;&amp; !boulderMove) {
    if(!place_free(x, y + 1)) {
        jump = true;
        fall = 0;
        if(airAbility) {
            jumpHeight = 15;
        } else if(earthAbility) {
            jumpHeight = 6;
        } else {
            jumpHeight = 9;
        }
        if(inWater) {
            jumpHeight /= 2;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Punch

if(!punch) {
    global.enemyHit = false;
    global.enemyHitId = noone;
    global.enemyHitType = noone;
    punch = true;
    
    if(airAbility) {
        alarm[3] = 4; 
        if(left) {
            sprite_index = punchLeftAir_spr;
            for(i = 1; i &lt; 6; i++) {
                if(place_meeting(x - i, y, enemy)) {
                    global.enemyHitId = instance_place(x - i, y, enemy);
                    global.enemyHit = true;
                    global.enemyHitType = "air";
                }
            }            
        } else {
            sprite_index = punchRightAir_spr;
            for(i = 1; i &lt; 6; i++) {
                if(place_meeting(x + i, y, enemy)) {
                    global.enemyHitId = instance_place(x + i, y, enemy);
                    global.enemyHit = true;
                    global.enemyHitType = "air";
                }
            }
        }
    } else if(earthAbility) {
        alarm[3] = 12;
        if(left) {
            sprite_index = punchLeftEarth_spr;
            for(i = 1; i &lt; 10; i++) {
                if(place_meeting(x - i, y, enemy)) {
                    global.enemyHitId = instance_place(x - i, y, enemy);
                    global.enemyHit = true;
                    global.enemyHitType = "earth";
                }
            }
        } else {
            sprite_index = punchRightEarth_spr;
            for(i = 1; i &lt; 6; i++) {
                if(place_meeting(x + i, y, enemy)) {
                    global.enemyHitId = instance_place(x + i, y, enemy);
                    global.enemyHit = true;
                    global.enemyHitType = "earth";
                }
            }
        }
    } else if(waterAbility) {
        alarm[3] = 8;
        if(left) {
            sprite_index = punchLeftWater_spr;
            for(i = 1; i &lt; 8; i++) {
                if(place_meeting(x - i, y, enemy)) {
                    global.enemyHitId = instance_place(x - i, y, enemy);
                    global.enemyHit = true;
                    global.enemyHitType = "water";
                }
            }
        } else {
            sprite_index = punchRightWater_spr;
            for(i = 1; i &lt; 8; i++) {
                if(place_meeting(x + i, y, enemy)) {
                    global.enemyHitId = instance_place(x + i, y, enemy);
                    global.enemyHit = true;
                    global.enemyHitType = "water";
                }
            }
        }
    } else {
        alarm[3] = 8;
        if(left) {
            sprite_index = punchLeftFire_spr;
            instance_create(x - 9, y + 8, fireball);
        } else {
            sprite_index = punchRightFire_spr;
            instance_create(x + 9, y + 8, fireball);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start timer on reactivation
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start run timer
runRight = true;
alarm[2] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start run timer
runLeft = true;
alarm[1] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
